"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Progress } from "@/components/ui/progress"
import { Download, FileText, Table, Calendar, CheckCircle, AlertCircle, Loader2 } from "lucide-react"
import { exportService } from "@/lib/export/export-service"
import type { ExportOptions, ExportResult } from "@/lib/export/export-service"

export default function ExportPage() {
  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    format: "pdf",
    customization: {
      includeStudentCount: true,
      includeRoomDetails: true,
      includeFacultyInfo: true,
      colorCoding: true,
      headerText: "University Timetable",
      footerText: "Generated by AI Scheduler",
    },
  })
  const [isExporting, setIsExporting] = useState(false)
  const [exportHistory, setExportHistory] = useState<ExportResult[]>([])
  const [exportProgress, setExportProgress] = useState(0)

  useEffect(() => {
    loadExportHistory()
  }, [])

  const loadExportHistory = async () => {
    try {
      const history = await exportService.getExportHistory()
      setExportHistory(history)
    } catch (error) {
      console.error("Failed to load export history:", error)
    }
  }

  const handleExport = async () => {
    setIsExporting(true)
    setExportProgress(0)

    // Simulate progress
    const progressInterval = setInterval(() => {
      setExportProgress((prev) => {
        if (prev >= 90) {
          clearInterval(progressInterval)
          return prev
        }
        return prev + 10
      })
    }, 200)

    try {
      const result = await exportService.exportTimetable(exportOptions)
      setExportProgress(100)

      if (result.success) {
        // Add to history
        setExportHistory((prev) => [result, ...prev])
        // Simulate download
        console.log("Download started:", result.downloadUrl)
      }
    } catch (error) {
      console.error("Export failed:", error)
    } finally {
      setIsExporting(false)
      setTimeout(() => setExportProgress(0), 2000)
    }
  }

  const getFormatIcon = (format: string) => {
    switch (format) {
      case "pdf":
        return <FileText className="h-4 w-4 text-red-500" />
      case "excel":
        return <Table className="h-4 w-4 text-green-500" />
      case "csv":
        return <Table className="h-4 w-4 text-blue-500" />
      case "ical":
        return <Calendar className="h-4 w-4 text-purple-500" />
      default:
        return <FileText className="h-4 w-4" />
    }
  }

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return "0 Bytes"
    const k = 1024
    const sizes = ["Bytes", "KB", "MB", "GB"]
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Export Timetables</h1>
          <p className="text-gray-600 mt-1">Export timetables in various formats</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Export Configuration */}
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Export Configuration</CardTitle>
              <CardDescription>Configure your timetable export settings</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Format Selection */}
              <div>
                <Label htmlFor="format">Export Format</Label>
                <Select
                  value={exportOptions.format}
                  onValueChange={(value: any) => setExportOptions((prev) => ({ ...prev, format: value }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pdf">
                      <div className="flex items-center gap-2">
                        <FileText className="h-4 w-4 text-red-500" />
                        PDF Document
                      </div>
                    </SelectItem>
                    <SelectItem value="excel">
                      <div className="flex items-center gap-2">
                        <Table className="h-4 w-4 text-green-500" />
                        Excel Spreadsheet
                      </div>
                    </SelectItem>
                    <SelectItem value="csv">
                      <div className="flex items-center gap-2">
                        <Table className="h-4 w-4 text-blue-500" />
                        CSV File
                      </div>
                    </SelectItem>
                    <SelectItem value="ical">
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4 text-purple-500" />
                        iCalendar (.ics)
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Filters */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="programs">Programs</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="All Programs" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Programs</SelectItem>
                      <SelectItem value="cs">Computer Science</SelectItem>
                      <SelectItem value="ee">Electrical Engineering</SelectItem>
                      <SelectItem value="me">Mechanical Engineering</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="faculty">Faculty</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="All Faculty" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Faculty</SelectItem>
                      <SelectItem value="cs_faculty">CS Faculty</SelectItem>
                      <SelectItem value="ee_faculty">EE Faculty</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Customization Options */}
              <div>
                <Label className="text-base font-medium">Customization Options</Label>
                <div className="mt-3 space-y-3">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="student-count"
                      checked={exportOptions.customization?.includeStudentCount}
                      onCheckedChange={(checked) =>
                        setExportOptions((prev) => ({
                          ...prev,
                          customization: { ...prev.customization, includeStudentCount: !!checked },
                        }))
                      }
                    />
                    <Label htmlFor="student-count" className="text-sm">
                      Include student count
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="room-details"
                      checked={exportOptions.customization?.includeRoomDetails}
                      onCheckedChange={(checked) =>
                        setExportOptions((prev) => ({
                          ...prev,
                          customization: { ...prev.customization, includeRoomDetails: !!checked },
                        }))
                      }
                    />
                    <Label htmlFor="room-details" className="text-sm">
                      Include room details
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="faculty-info"
                      checked={exportOptions.customization?.includeFacultyInfo}
                      onCheckedChange={(checked) =>
                        setExportOptions((prev) => ({
                          ...prev,
                          customization: { ...prev.customization, includeFacultyInfo: !!checked },
                        }))
                      }
                    />
                    <Label htmlFor="faculty-info" className="text-sm">
                      Include faculty information
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="color-coding"
                      checked={exportOptions.customization?.colorCoding}
                      onCheckedChange={(checked) =>
                        setExportOptions((prev) => ({
                          ...prev,
                          customization: { ...prev.customization, colorCoding: !!checked },
                        }))
                      }
                    />
                    <Label htmlFor="color-coding" className="text-sm">
                      Enable color coding
                    </Label>
                  </div>
                </div>
              </div>

              {/* Header and Footer */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="header-text">Header Text</Label>
                  <Input
                    id="header-text"
                    value={exportOptions.customization?.headerText || ""}
                    onChange={(e) =>
                      setExportOptions((prev) => ({
                        ...prev,
                        customization: { ...prev.customization, headerText: e.target.value },
                      }))
                    }
                    placeholder="Enter header text"
                  />
                </div>
                <div>
                  <Label htmlFor="footer-text">Footer Text</Label>
                  <Input
                    id="footer-text"
                    value={exportOptions.customization?.footerText || ""}
                    onChange={(e) =>
                      setExportOptions((prev) => ({
                        ...prev,
                        customization: { ...prev.customization, footerText: e.target.value },
                      }))
                    }
                    placeholder="Enter footer text"
                  />
                </div>
              </div>

              {/* Export Progress */}
              {isExporting && (
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Generating export...</span>
                    <span>{exportProgress}%</span>
                  </div>
                  <Progress value={exportProgress} />
                </div>
              )}

              {/* Export Button */}
              <Button onClick={handleExport} disabled={isExporting} className="w-full">
                {isExporting ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Download className="h-4 w-4 mr-2" />
                    Generate Export
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Export History */}
        <div>
          <Card>
            <CardHeader>
              <CardTitle>Export History</CardTitle>
              <CardDescription>Recent exports and downloads</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {exportHistory.length === 0 ? (
                  <p className="text-center text-gray-500 py-4">No exports yet</p>
                ) : (
                  exportHistory.map((export_item) => (
                    <div key={export_item.filename} className="p-3 border rounded-lg">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2">
                          {getFormatIcon(export_item.format)}
                          <div>
                            <p className="text-sm font-medium">{export_item.filename}</p>
                            <p className="text-xs text-gray-500">
                              {formatFileSize(export_item.size)} • {export_item.generatedAt.toLocaleDateString()}
                            </p>
                          </div>
                        </div>
                        {export_item.success ? (
                          <CheckCircle className="h-4 w-4 text-green-500" />
                        ) : (
                          <AlertCircle className="h-4 w-4 text-red-500" />
                        )}
                      </div>
                      {export_item.success ? (
                        <Button variant="outline" size="sm" className="w-full bg-transparent">
                          <Download className="h-3 w-3 mr-1" />
                          Download
                        </Button>
                      ) : (
                        <p className="text-xs text-red-600">{export_item.error}</p>
                      )}
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>

          {/* Quick Export Templates */}
          <Card className="mt-6">
            <CardHeader>
              <CardTitle>Quick Templates</CardTitle>
              <CardDescription>Pre-configured export templates</CardDescription>
            </CardHeader>
            <CardContent className="space-y-2">
              {[
                { name: "Student Schedule", format: "pdf", icon: FileText },
                { name: "Faculty Workload", format: "excel", icon: Table },
                { name: "Room Utilization", format: "csv", icon: Table },
                { name: "Calendar Import", format: "ical", icon: Calendar },
              ].map((template) => (
                <Button key={template.name} variant="outline" size="sm" className="w-full justify-start bg-transparent">
                  <template.icon className="h-4 w-4 mr-2" />
                  {template.name}
                </Button>
              ))}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
